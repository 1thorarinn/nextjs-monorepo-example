generator client {
  provider = "prisma-client-js"
  // output = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model Poem {
  id       Int      @id @default(autoincrement())
  slug     String   @unique
  title    String
  content  String
  keywords String[]
  author   String
  link     String?
  image    String?

  @@map(name: "poem")
}

model Post {
  id          Int       @id @default(autoincrement())
  slug        String   @unique
  title       String
  content     String?
  link        String?
  image       String?
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    BigInt?
  publishedAt DateTime? @map(name: "published_at")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "post")
}

model User {
  id            BigInt    @id @default(autoincrement())
  firstName     String?   @map(name: "first_name")
  lastName      String?   @map(name: "last_name")
  nickname      String    @unique
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  avatarUrl     String?   @map("avatar_url")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]

  Post Post[]
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            BigInt  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       BigInt   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("auth_verification_tokens")
}
